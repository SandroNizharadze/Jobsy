# Generated by Django 5.1.7 on 2025-05-09 16:34

from django.db import migrations
import random
from datetime import timedelta
from django.utils import timezone

def create_sample_jobs(apps, schema_editor):
    # Get models
    User = apps.get_model('auth', 'User')
    UserProfile = apps.get_model('core', 'UserProfile')
    EmployerProfile = apps.get_model('core', 'EmployerProfile')
    JobListing = apps.get_model('core', 'JobListing')
    
    # Check if we already have sample jobs
    if JobListing.objects.count() > 5:
        return  # Skip if we already have jobs
    
    # Get or create admin user
    try:
        admin_user = User.objects.get(username='admin')
    except User.DoesNotExist:
        # Migration runs without User model properly loaded, skip if missing
        return
    
    # Get or create admin user profile
    admin_profile, created = UserProfile.objects.get_or_create(
        user=admin_user,
        defaults={'role': 'admin'}
    )
    
    # Sample companies
    companies = [
        {
            'name': 'TBC Bank',
            'logo': '',
            'website': 'https://www.tbcbank.ge',
            'description': 'One of the leading banks in Georgia with a focus on digital innovation.',
            'size': '1001+',
            'industry': 'Banking & Finance',
            'location': 'თბილისი'
        },
        {
            'name': 'Redberry',
            'logo': '',
            'website': 'https://redberry.ge',
            'description': 'Digital marketing and software development agency.',
            'size': '51-200',
            'industry': 'Technology',
            'location': 'თბილისი'
        },
        {
            'name': 'Bank of Georgia',
            'logo': '',
            'website': 'https://bankofgeorgia.ge',
            'description': 'Leading Georgian bank offering innovative financial solutions.',
            'size': '1001+',
            'industry': 'Banking & Finance',
            'location': 'თბილისი'
        },
        {
            'name': 'Adjara Group',
            'logo': '',
            'website': 'https://adjaragroup.com',
            'description': 'Hospitality and real estate development company.',
            'size': '501-1000',
            'industry': 'Hospitality & Tourism',
            'location': 'თბილისი, ბათუმი'
        },
        {
            'name': 'Alta Software',
            'logo': '',
            'website': 'https://alta.software',
            'description': 'Software development company specializing in custom solutions.',
            'size': '51-200',
            'industry': 'Technology',
            'location': 'თბილისი'
        }
    ]
    
    # Create employer profiles for each company
    employer_profiles = []
    for company in companies:
        # Check if the company already exists for this user profile
        try:
            employer_profile = EmployerProfile.objects.get(
                user_profile=admin_profile,
                company_name=company['name']
            )
        except EmployerProfile.DoesNotExist:
            # Only create if it doesn't exist
            employer_profile = EmployerProfile.objects.create(
                user_profile=admin_profile,
                company_name=company['name'],
                company_website=company['website'],
                company_description=company['description'],
                company_size=company['size'],
                industry=company['industry'],
                location=company['location']
            )
        employer_profiles.append(employer_profile)
    
    # Sample tech job data
    tech_jobs = [
        {
            'title': 'Full Stack Developer',
            'description': 'გვესაჭიროება გამოცდილი Full Stack Developer, რომელსაც აქვს გუნდში მუშაობის გამოცდილება. კანდიდატს უნდა შეეძლოს React-ისა და Node.js-ის გამოყენებით აპლიკაციების შექმნა. ასევე საჭიროა SQL/NoSQL მონაცემთა ბაზებთან მუშაობის გამოცდილება. მოთხოვნილია ინგლისური ენის საშუალო დონეზე ცოდნა.',
            'salary_min': 2500,
            'salary_max': 4000,
            'salary_type': 'თვეში',
            'category': 'ტექნოლოგია',
            'experience': 'საშუალო',
            'interests': 'JavaScript, React, Node.js, TypeScript',
            'fields': 'Web Development, Backend, Frontend',
            'job_preferences': 'სრული განაკვეთი'
        },
        {
            'title': 'Python Developer',
            'description': 'ვეძებთ Python დეველოპერს Django-ს გამოცდილებით. კანდიდატს უნდა შეეძლოს API-ების შექმნა და მონაცემთა ბაზებთან მუშაობა. ასევე საჭიროა REST API-ს არქიტექტურის ცოდნა.',
            'salary_min': 2000,
            'salary_max': 3500,
            'salary_type': 'თვეში',
            'category': 'ტექნოლოგია',
            'experience': 'საშუალო',
            'interests': 'Python, Django, Flask, PostgreSQL',
            'fields': 'Backend Development, APIs',
            'job_preferences': 'სრული განაკვეთი'
        },
        {
            'title': 'DevOps Engineer',
            'description': 'გვესაჭიროება DevOps ინჟინერი, რომელსაც აქვს Docker-ისა და Kubernetes-ის გამოცდილება. კანდიდატს უნდა შეეძლოს CI/CD პროცესების ავტომატიზაცია და მონიტორინგის სისტემების გამართვა.',
            'salary_min': 3000,
            'salary_max': 5000,
            'salary_type': 'თვეში',
            'category': 'ტექნოლოგია',
            'experience': 'პროფესიონალი',
            'interests': 'DevOps, Docker, Kubernetes, CI/CD',
            'fields': 'Cloud Infrastructure, Automation',
            'job_preferences': 'სრული განაკვეთი'
        },
        {
            'title': 'Front-end React Developer',
            'description': 'ვეძებთ React დეველოპერს, რომელსაც აქვს მინიმუმ 1 წლიანი გამოცდილება. კანდიდატს უნდა შეეძლოს Redux-ის გამოყენება და მოდერნული UI ბიბლიოთეკებთან მუშაობა.',
            'salary_min': 1800,
            'salary_max': 3000,
            'salary_type': 'თვეში',
            'category': 'ტექნოლოგია',
            'experience': 'დამწყები',
            'interests': 'React, Redux, CSS, HTML',
            'fields': 'Frontend Development, Web Development',
            'job_preferences': 'სრული განაკვეთი'
        },
        {
            'title': 'Mobile App Developer (iOS/Android)',
            'description': 'გვესაჭიროება მობილური აპლიკაციების დეველოპერი React Native-ის გამოცდილებით. კანდიდატს უნდა შეეძლოს კროს-პლატფორმული აპლიკაციების შექმნა.',
            'salary_min': 2200,
            'salary_max': 4000,
            'salary_type': 'თვეში',
            'category': 'ტექნოლოგია',
            'experience': 'საშუალო',
            'interests': 'React Native, iOS, Android, Mobile Development',
            'fields': 'Mobile Development',
            'job_preferences': 'სრული განაკვეთი'
        }
    ]
    
    # Sample finance job data
    finance_jobs = [
        {
            'title': 'ფინანსური ანალიტიკოსი',
            'description': 'ვეძებთ გამოცდილ ფინანსურ ანალიტიკოსს ბიზნეს გადაწყვეტილებების მისაღებად. კანდიდატს უნდა ჰქონდეს ფინანსური ანგარიშების ანალიზის და პროგნოზირების უნარი.',
            'salary_min': 1800,
            'salary_max': 3000,
            'salary_type': 'თვეში',
            'category': 'ფინანსები',
            'experience': 'საშუალო',
            'interests': 'Financial Analysis, Reporting, Budgeting',
            'fields': 'Finance, Banking',
            'job_preferences': 'სრული განაკვეთი'
        },
        {
            'title': 'რისკების მენეჯერი',
            'description': 'გვესაჭიროება რისკების მართვის სპეციალისტი საბანკო სფეროში მუშაობის გამოცდილებით. კანდიდატს უნდა შეეძლოს რისკების იდენტიფიცირება და შეფასება.',
            'salary_min': 2500,
            'salary_max': 4000,
            'salary_type': 'თვეში',
            'category': 'ფინანსები',
            'experience': 'პროფესიონალი',
            'interests': 'Risk Management, Banking',
            'fields': 'Finance, Risk Management',
            'job_preferences': 'სრული განაკვეთი'
        }
    ]
    
    # Sample hospitality job data
    hospitality_jobs = [
        {
            'title': 'სასტუმროს მენეჯერი',
            'description': 'ვეძებთ გამოცდილ სასტუმროს მენეჯერს ბათუმში. კანდიდატს უნდა ჰქონდეს სასტუმრო ბიზნესში მუშაობის გამოცდილება და ინგლისური ენის ცოდნა.',
            'salary_min': 1500,
            'salary_max': 2500,
            'salary_type': 'თვეში',
            'category': 'ტურიზმი და მასპინძლობა',
            'experience': 'საშუალო',
            'interests': 'Hospitality, Hotel Management',
            'fields': 'Tourism & Hospitality',
            'job_preferences': 'სრული განაკვეთი'
        },
        {
            'title': 'შეფ-მზარეული',
            'description': 'გვესაჭიროება შეფ-მზარეული თბილისის რესტორანში. კანდიდატს უნდა ჰქონდეს მინიმუმ 3 წლიანი გამოცდილება და ქართული და ევროპული სამზარეულოს ცოდნა.',
            'salary_min': 1800,
            'salary_max': 3000,
            'salary_type': 'თვეში',
            'category': 'ტურიზმი და მასპინძლობა',
            'experience': 'პროფესიონალი',
            'interests': 'Cooking, Culinary Arts',
            'fields': 'Food & Beverage',
            'job_preferences': 'სრული განაკვეთი'
        },
        {
            'title': 'ტურისტული გიდი',
            'description': 'ვეძებთ ტურისტულ გიდს სეზონური სამუშაოსთვის. კანდიდატს უნდა ჰქონდეს ინგლისური და რუსული ენების ცოდნა და საქართველოს ისტორიის და კულტურის ცოდნა.',
            'salary_min': 1200,
            'salary_max': 2000,
            'salary_type': 'თვეში',
            'category': 'ტურიზმი და მასპინძლობა',
            'experience': 'დამწყები',
            'interests': 'Tourism, History, Culture',
            'fields': 'Tourism',
            'job_preferences': 'სეზონური'
        }
    ]
    
    # Combine all jobs
    all_jobs = tech_jobs + finance_jobs + hospitality_jobs
    
    # Assign jobs to companies by industry match
    for job in all_jobs:
        # Choose appropriate employer profile based on job category
        if job['category'] == 'ტექნოლოგია':
            suitable_profiles = [ep for ep in employer_profiles if ep.industry == 'Technology']
        elif job['category'] == 'ფინანსები':
            suitable_profiles = [ep for ep in employer_profiles if ep.industry == 'Banking & Finance']
        elif job['category'] == 'ტურიზმი და მასპინძლობა':
            suitable_profiles = [ep for ep in employer_profiles if ep.industry == 'Hospitality & Tourism']
        else:
            suitable_profiles = employer_profiles
        
        employer = random.choice(suitable_profiles if suitable_profiles else employer_profiles)
        
        # Create random posted date in the last 30 days
        days_ago = random.randint(1, 30)
        posted_date = timezone.now() - timedelta(days=days_ago)
        
        # Create the job
        JobListing.objects.create(
            title=job['title'],
            company=employer.company_name,
            description=job['description'],
            salary_min=job['salary_min'],
            salary_max=job['salary_max'],
            salary_type=job['salary_type'],
            category=job['category'],
            location=employer.location,
            employer=employer,
            posted_at=posted_date,
            interests=job['interests'],
            fields=job['fields'],
            experience=job['experience'],
            job_preferences=job['job_preferences'],
            status='approved'  # Auto-approve sample jobs
        )


def remove_sample_jobs(apps, schema_editor):
    # This is optional - removes sample data if migrations are reversed
    JobListing = apps.get_model('core', 'JobListing')
    # Only delete jobs created by this migration (we can't really identify them, so we'd skip this in production)
    # JobListing.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0009_alter_employerprofile_company_size'),
    ]

    operations = [
        migrations.RunPython(create_sample_jobs, remove_sample_jobs),
    ]
